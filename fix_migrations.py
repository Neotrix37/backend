import os
import sys
import urllib.parse
from alembic.config import Config
from alembic import command
from sqlalchemy import create_engine, exc

def fix_migrations():
    # Dados de conex√£o atualizados para usar o endpoint p√∫blico
    db_config = {
        'username': 'postgres',
        'password': 'PVVHzsCZDuQiwnuziBfcgukYLCuCxdau',
        'host': 'monorail.proxy.rlwy.net',  # Usando o endpoint p√∫blico
        'port': '33939',  # Verifique se esta √© a porta correta
        'database': 'railway'
    }
    
    # Cria a URL de conex√£o manualmente
    db_url = f"postgresql://{db_config['username']}:{urllib.parse.quote_plus(db_config['password'])}@{db_config['host']}:{db_config['port']}/{db_config['database']}"
    
    print("Conectando ao banco de dados...")
    print(f"URL: postgresql://{db_config['username']}:******@{db_config['host']}:{db_config['port']}/{db_config['database']}")
    
    try:
        # Configura√ß√£o m√≠nima para conex√£o
        engine = create_engine(db_url)
        
        # Testa a conex√£o b√°sica primeiro
        with engine.connect() as connection:
            print("‚úÖ Conex√£o bem-sucedida!")
            
            # Verifica se a tabela alembic_version existe
            if not engine.dialect.has_table(connection, 'alembic_version'):
                print("‚ÑπÔ∏è  Tabela alembic_version n√£o encontrada. Criando...")
                config = Config("alembic.ini")
                command.stamp(config, "head")
                print("‚úÖ Tabela alembic_version criada com sucesso!")
                return
            
            # Obt√©m a vers√£o atual do banco de dados
            result = connection.execute("SELECT version_num FROM alembic_version").fetchone()
            if not result:
                print("‚ÑπÔ∏è  Nenhuma vers√£o encontrada. Marcando como head...")
                config = Config("alembic.ini")
                command.stamp(config, "head")
                return
                
            current_rev = result[0]
            print(f"‚ÑπÔ∏è  Vers√£o atual do banco: {current_rev}")
            
            # For√ßa a marca√ß√£o da vers√£o mais recente como head
            print("üîÑ Atualizando para a vers√£o mais recente...")
            config = Config("alembic.ini")
            command.stamp(config, "head", purge=True)
            
            print("‚úÖ Migra√ß√µes corrigidas com sucesso!")
            
    except exc.SQLAlchemyError as e:
        print(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        print("Verifique se as credenciais e o host est√£o corretos.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if 'engine' in locals():
            engine.dispose()

if __name__ == "__main__":
    fix_migrations()
